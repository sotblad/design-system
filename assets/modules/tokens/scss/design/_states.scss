/**
 *------------------------------------------------------------------------------
 *
 *  Buttons, Links, And Other Modules Display CSS Properties Based On Module
 *  'State' ( :hover, :active, etc. )
 *
 *  Desired Result:
 *  - Default Colors Assigned To Element;
 *  - On 'highlight' Or ':hover' Display A Slightly Brighter Version Of
 *    The Default Color;
 *  - On 'pressed' Or ':active' Display Slightly Darker Version Of The
 *    Default Color;
 *
 *  End Product Gives Off The Illusion Of A Static -> Hovering -> Pressed
 *  Button Without Dealing With Transforms To Shift Elements.
 *
 *  Mixin Also Handles Removing Duplicate List Keys
 *
 */

@include token-set(states, (
    active: '&:not(.disabled).active',
    not-active: '&:not(.active)',

    default: '&:not(.active):not(:hover)',

    disabled: '&.disabled',
    not-disabled: '&:not(.disabled)',

    highlight: '&:not(.disabled).active' '&:not(.disabled):hover',
    hover: '&:not(.active):not(.disabled):hover',
    pressed: '&:not(.active):not(.disabled):active'
));


/**
 *------------------------------------------------------------------------------
 *
 *  Functions
 *
 */

@function state($key, $replace: null) {
    $state: token-get(states $key);

    // To Avoid Overcomplicating The Responsibility Of This Function Limit
    // Replace Parameter To String Values Only
    @if $replace {
        @if type-of($replace) != 'string' or type-of($state) != 'string' {
            @error "'str-replace' Cannot Be Used On A List!";
        }

        $state: str-replace('&', $replace, $state);
    }

    @return $state;
}


/**
 *------------------------------------------------------------------------------
 *
 *  Mixins
 *
 */

@mixin state($states) {
    $selector: ();

    @each $s in to-list($states) {
        $state: state($s);

        @if $state {
            $selector: append($selector, $state);
        }
    }

    #{list-implode(',', list-unique($selector))} {
        @content;
    }
}
